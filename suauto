다른 프로그램 제어하기

 [ 외부 프로그램의 실행과 종료여부를 판단 ]
 
 

자신의 어플리케이션이 아닌 다른 어플리케이션의 종료여부를 판단해야할 경우에 사용합니다. 
예를 들어, winzip내의 인스톨를 실행시키면, 압축된 프로그램이 바로 인스톨이 되는 경우를 보셨을껍니다. 
이때, 그 인스톨되는 프로그램이 종료되었을 때, winzip도 비로소 종료가 됩니다.

 
 
 

1. 어플리케이션 클래스의 사전 준비

 

외부 어플리케이션의 정보를 관리하기위한 정보구조체를 선언압니다.이때, 어플리케이션 클래스에 Protected로 작성해 둡니다.

 

class CALApp : public CWinApp
{

protected:

PROCESS_INFORMATION pinfo;

};
 

이때, pinfo의 값은 쓰레기값을 갖고 있으므로, 이에대한 초기화를 해 줍니다.

 

// CALApp 생성자 
CALApp::CALApp()
{

// TODO

pinf.hProcess=NULL;
pinf.hThread=NULL;
pinf.dwProcessId=0L;
pinf.dwThreadId=0L;

}
 

2. 외부 어플리케이션을 정보를 저장한뒤 실행시킵니다.

 

// 다른 프로그램을 기동하는 루틴
int CALApp::ExecuteOutsideEditor()
{

STARTUPINFO sinfo;

if(IsOutsideEditorRunning())

return -2;

memset(&sinfo, 0x00, sizeof(sinfo));

if(CreateProcess(NULL, szCmdLine, NULL, NULL, FALSE, 0, NULL, NULL, &sinfo, &pinfo))

return -1;

else

return 0;

}
 

즉, 외부프로그램을 실행하면서, 그에대한 종료여부를 판단하기위해 정보구조체를 저장하는것이죠..

szCmdLine은 실행시킬 외부프로그램의 이름을 저장하는 스트링변수이다. 예를 들어, 아래와 같은 형식의 스트링을 저장시킨다고 보면됩니다.

 

CString szCmdLine; 
szCmdLine.Format("c:\\windows\\notepad.exe c:\\help.txt");
 

즉, 위의 내용은 "윈도우에 있는 메모장에 루트디렉토리에 있는 헬프파일을 여는 외부프로그램을 실행시키는 의미"가 되는 것이 되는것입니다.
(노파심에서 말씀드리는데, 프로그램상에서는 \를 쓰기 위해서는 \\두 번 써야한다는건 아시겠죠?)

 

if(IsOutsideEditorRunning()) 
return -2;
 

위의 명령문은 외부 프로그램이 이미 실행상태인지를 의미합니다. 이는 외부 프로그램을 관리하는 정보변수가 
pinfo하나밖에 없기 때문에 한번에 하나의 외부프로그램을 실행할 수 있기 때문입니다. 만약에 복수의 외부 프로그램을 실행하고 싶으시다면,
이 정보구조체변수를 배열과 같이 복수개로 만들어 놓으면 됩니다. 이때는 카운터가 필요하겠죠 ?

memset은 STARTUPINFO 구조 체형 변수 pinfo를 프로세스의 실행마다 초기화합니다. memset(&sinfo, 0x00, sizeof(sinfo))은, 
sinfo의 모든 멤버 변수에 0을 대입함을 의미합니다.

CreateProcess 함수는 여러 가지 인수를 갖지만,  szCmdLine만 신경을 쓰시면 됩니다.

 

 

3. 외부 어플리케이션이 아직 살아 있을까를 조사하는 루틴

 

// 기동한 프로그램이 아직 살아 있을까 탐색하는 루틴
int CALApp::IsOutsideEditorRunning()
{

unsigned long l;

if(pinfo.hProcess)
{

GetExitCodeProcess(pinfo.hProcess, &l);
if(l==STILL_ACTIVE)

return -1;       //동작중은 실행하지 않는다.

}

return 0;

}
 

pinfo는 위에서 실행한 외부프로그램의 현재상태가 저장되어 있습니다. 즉, pinfo.hProcess값이 NULL 인가 아닌가를 판단합니다.
그 값이NULL인경우는, 현재 실행중이나 판정하기 위한 정보가 없음을 의미하며,  NULL이 아닌 경우는 판정하기위한 정보가 생성되었음을 의미하고,
pinf.hProcess로부터, GetExitProcess Win32API 함수를 개입시켜, 외부 프로그램의 상태를 나타냅니다.

이렇게 얻은 값을 조사해 줌으로써, 외부 프로그램의 상태를 조사할 수 있습니다. 만일 동작중이면, STILL_ACTIVE를 의미하는것입니다.

 

4. 현재 정보를 체크합니다.

 

위와 같은 순서로 하면, 대부분 필요한 정보를 얻을 수 있습니다. 그러나 가장 핵심이 되는 부분이 빠졌죠 ?
바로 pinfo의 프로세스상태를 체크해주는 루틴이 필요합니다. 이것은 주기적으로 체크를 해야하기 때문에
WM_TIMER 메세지에 의해 실행되는 CWnd::OnTimer를 사용하면 간단히 해결됩니다.

이때, 타이머처리는 어플리케이션 클래스에 둘 수 없으므로, CMainFrame등과 같은 다른 클래스에 삽입합니다.

 

void CMainFrame::OnTimer(UINT nIDEvent) 
{

// pApp는 어플리케이션 클래스에의 포인터를 의미합니다. if(pApp->IsOutsideEditorRunning()==0)
{

// 만일 다른기능을 추가시, 아래 부분을 수정합니다.

AfxMessageBox("실행한 프로그램이 종료했습니다."); 

CFrameWnd::OnTimer(nIDEvent);
KillTimer(nIDEvent);
return;

}

CFrameWnd::OnTimer(nIDEvent);

}
 

여기서는 단순히 메시지 박스를 출력하도록 했지만, 이 부분을 수정해서, 다양한 기능을 추가할 수 있습니다.
 




다른 프로그램 제어하기(2)
  
[ 외부프로그램 제어 ]
 
 

Dos 프로그램의 경우 하나의 프로세서에 하나의 프로그램만이 동작을 합니다. 그러나 윈도우 프로그램의 경우 여러개의 프로그램이 동작할 수가 있죠 ?
별개의 프로그램의 경우에는 그 상황이 별로 문제가 되지 않지만, 만약 어떤 프로그램내에서 다른 프로그램의 실행을 생성한 경우는 가끔 문제가 되는 경우가 생깁니다. 예를 들어 HTML편집기에서 그 소스를 메모장으로 보내는 프로그램이 있다고 생각해 봅시다. 그럴 경우 편집기에서는 메모장을 생성하고, html태그들을 메모장으로 보냅니다. 순서적으로는 문제가 되지 않지만, 메모장 생성이 조금 느린 경우에는 문제가 생길 수 있습니다. 즉, 메모장을 실행할 수 있는 상태가 된 후에야, 데이터를 보낼 수 있는 방식이 필요하다는의미가 됩니다. 이럴 경우에 아래와 같은 형식으로 제어를 할 수 있습니다.

 
 

STARTUPINFO suinfo;
PROCESS_INFORMATION pinfo;
ZeroMemory(&suinfo, sizeof(suinfo));
sui.cb=sizeof(suinfo);
CreateProcess(NULL, "c:\\win\\notepad.exe", NULL, NULL, TRUE, 0, NULL, NULL, &suinfo, &pinfo);
WaitForInputIdle(pinfo.hProcess, INFINITE);
 

 

코드자체는 단순합니다. 순서적으로, 메모장의 실행을 생성하고, 그 프로세서가 실행가능한 상태가 될 때까지
아이들(WaitForInputIdle)상태에 머물 게 됩니다. 메모장이 윈도우화면에 나타났을 때, 메모장을 사용할 수 있습니다.


FindWindow: 윈도우 찾기

HWND FindWindow(

   LPCTSTR lpClassName, //클래스명 (NULL 시 모든 클래스조사)

   LPCTSTR lpWindowName //윈도우 캡션명만 사용가능 (NULL 시모든 윈도우 캡션 검색)

);

 

FindWindowEx: 윈도우 자세히 찾기(부모 윈도우의 자식윈도우 찾기 기능 포함)

HWND FindWindowEx(

   HWND hwndParent,

   HWND hwndChildAfter,

   LPCTSTR lpszClass,

   LPCTSTR lpszWindow

);

hwndParent와 hwndChildAfter가 NULL 일 경우는 FindWindow와 동일

 

Parameters

hwndParent : 찾고자 한는 자식윈도우의 부모윈도우 핸들

hwndChildAfter : 찾기 시작할 자식윈도우 핸들 ? 해당 자식윈도우 핸들의 다음 순번부터 찾기 시작함.

lpszClass : 클래스명.NULL 시 모든 클래스명 비교.

lpszWindow : 윈도우 제목(캡션). NULL 시 모든 윈도우명 비교.

 

클래스명 참고자료 : https://msdn.microsoft.com/en-us/library/ms633574(VS.85).aspx

Class

Description

ComboLBox

The class for the list box contained in a combo box.

DDEMLEvent

The class for Dynamic Data Exchange Management Library (DDEML) events.

Message

The class for a message-only window.

#32768

The class for a menu.

#32769

The class for the desktop window.

#32770

The class for a dialog box.

#32771

The class for the task switch window.

#32772

The class for icon titles.

 

기본 진행순서

1. FindWindow를 이용하여 다른 프로그램의 콘트롤 핸들을구한다.

2. 메시지를 전달한다.

 

예외사항

캡션바가 없는 대화상자이며, 메인 대화상자에서 Modal이 아닌 Modaless로 동적 생성된 대화상자이다.

SPY++을 통해 조사해 보니 캡션은 “”, 클래스명은 #32770임. 또한전체 윈도우를 검색해 보니 동일한 조건의 윈도우가 여러 개 있음.

FindWindow를 사용할 수 없음.

여러가지 조건을 만들어서 구현(부모윈도우의 핸들은 구할 수 있으므로이를 이용)


 

LRESULTCBarcodeScannerDlg::OnBarCodeReadHandy(WPARAM wParam, LPARAM lParam)

{

        CStringstrSerial;

        strSerial.Format("%s",g_szHandyReceiveBuffer);

 

        CStringstrSerialText;

        strSerialText.Format("%s",strSerial);

 

        SetDlgItemText(IDC_EDIT_DATA, strSerialText );

 

        // 캡션명이없는 대화상자를 찾는다.

        HWNDhWndNext = ::FindWindowEx(NULL, NULL, "#32770", "");

 

        // 부모윈도우의 캡션을 이용하여 핸들을 구한다.

        // 만약부모 윈도우 캡션마저 없다면, 자식윈도우가 가지고 있는 컨트롤들의ID와 비교.

        HWNDhWndMain = ::FindWindow(NULL,"DCU Monitoring S/W");

 

        while(hWndNext )

        {

               //캡션명이 없는 대화상자의 부모를 찾는다.

               CWnd* pWnd = CWnd::FromHandle(hWndNext)->GetParent();

 

               //알고 있는 ID를 비교하여 일치하지 않을 경우는 계속해서 다음 윈도우를 찾음.

               //두 번째 인자 이후부터 찾도록 hWndNext를 다시 대입.

               if(pWnd->m_hWnd != hWndMain )

                       hWndNext= ::FindWindowEx(NULL, hWndNext, "#32770", "");

               else

                       break;

        }

 

        // 조건에맞는 윈도우가 없음.

        if(hWndNext == NULL )

               returnFALSE;

 

        // 찾았으므로자식 윈도우가 가지고 있는 콘트롤들의 핸들을 구한다.

        CWnd* pCtrlEdit = NULL;

        pCtrlEdit= CWnd::FromHandle(hWndNext)-> GetDlgItem( 0x0437 );

 

        CWnd* pCtrlBtn = NULL;

        pCtrlBtn= CWnd::FromHandle(hWndNext)-> GetDlgItem( 0x03FC );

 

 

 

        intnLen = strSerialText.GetLength();

        charstr[255] = {0,};

 

        for(int i = 0 ; i < nLen ; i++ )

               str[i]= strSerialText.GetAt(i);

 

        if(pCtrlEdit != NULL)

        {

               //에디트 상자에 원하는 데이터를 전달한다.

               ::SendMessage(pCtrlEdit->m_hWnd,WM_SETTEXT, nLen, (WPARAM)str);

               //버튼을 클릭하도록 한다.

               ::SendMessage(pCtrlBtn->m_hWnd,BM_CLICK, 0, 0);

        }

 

        returnTRUE;

}









----------------------------------------------------------

// SU_auto2.cpp : 응용 프로그램에 대한 클래스 동작을 정의합니다.
//

#include "stdafx.h"
#include "SU_auto2.h"
#include "SU_auto2Dlg.h"
//#include <iostream>
#ifdef _DEBUG
#define new DEBUG_NEW
#endif

//using namespace std;

// CSU_auto2App

BEGIN_MESSAGE_MAP(CSU_auto2App, CWinApp)
	ON_COMMAND(ID_HELP, &CWinApp::OnHelp)
END_MESSAGE_MAP()


// CSU_auto2App 생성

CSU_auto2App::CSU_auto2App()
{
	// 다시 시작 관리자 지원
	pinfo.hProcess=NULL;
	pinfo.hThread=NULL;
	pinfo.dwProcessId=0L;
	pinfo.dwThreadId=0L;
	
	m_dwRestartManagerSupportFlags = AFX_RESTART_MANAGER_SUPPORT_RESTART;

	// TODO: 여기에 생성 코드를 추가합니다.
	// InitInstance에 모든 중요한 초기화 작업을 배치합니다.
}


// 유일한 CSU_auto2App 개체입니다.

CSU_auto2App theApp;


// CSU_auto2App 초기화


BOOL CSU_auto2App::InitInstance()
{
	// 응용 프로그램 매니페스트가 ComCtl32.dll 버전 6 이상을 사용하여 비주얼 스타일을
	// 사용하도록 지정하는 경우, Windows XP 상에서 반드시 InitCommonControlsEx()가 필요합니다.
	// InitCommonControlsEx()를 사용하지 않으면 창을 만들 수 없습니다.
	INITCOMMONCONTROLSEX InitCtrls;
	InitCtrls.dwSize = sizeof(InitCtrls);
	// 응용 프로그램에서 사용할 모든 공용 컨트롤 클래스를 포함하도록
	// 이 항목을 설정하십시오.
	InitCtrls.dwICC = ICC_WIN95_CLASSES;
	InitCommonControlsEx(&InitCtrls);

	CWinApp::InitInstance();

	//WindowCheck(CString strWindowName, CRect& WindowRect);

	AfxEnableControlContainer();

	// 대화 상자에 셸 트리 뷰 또는
	// 셸 목록 뷰 컨트롤이 포함되어 있는 경우 셸 관리자를 만듭니다.
	CShellManager *pShellManager = new CShellManager;

	// 표준 초기화
	// 이들 기능을 사용하지 않고 최종 실행 파일의 크기를 줄이려면
	// 아래에서 필요 없는 특정 초기화
	// 루틴을 제거해야 합니다.
	// 해당 설정이 저장된 레지스트리 키를 변경하십시오.
	// TODO: 이 문자열을 회사 또는 조직의 이름과 같은
	// 적절한 내용으로 수정해야 합니다.
	SetRegistryKey(_T("로컬 응용 프로그램 마법사에서 생성된 응용 프로그램"));

	CSU_auto2Dlg dlg;
	m_pMainWnd = &dlg;
	INT_PTR nResponse = dlg.DoModal();
	if (nResponse == IDOK)
	{
		// TODO: 여기에 [확인]을 클릭하여 대화 상자가 없어질 때 처리할
		//  코드를 배치합니다.
	}
	else if (nResponse == IDCANCEL)
	{
		// TODO: 여기에 [취소]를 클릭하여 대화 상자가 없어질 때 처리할
		//  코드를 배치합니다.
	}

	// 위에서 만든 셸 관리자를 삭제합니다.
	if (pShellManager != NULL)
	{
		delete pShellManager;
	}

	// 대화 상자가 닫혔으므로 응용 프로그램의 메시지 펌프를 시작하지 않고  응용 프로그램을 끝낼 수 있도록 FALSE를
	// 반환합니다.
	return FALSE;
}


int CSU_auto2App::ExecuteOutsideEditor()
{

	STARTUPINFO sinfo;
	CString szCmdLine; 
	
	szCmdLine.Format("
	//szCmdLine.Format("c:\\windows\\notepad.exe");
	if(IsOutsideEditorRunning())

		return -2;

	memset(&sinfo, 0x00, sizeof(sinfo));

	if(CreateProcess(NULL, szCmdLine, NULL, NULL, FALSE, 0, NULL, NULL, &sinfo, &pinfo))

		return -1;

	else

		return 0;

}
/*
BOOL CSU_auto2App::WindowCheck(CString strWindowName, CRect& WindowRect)
{
HWND hWnd = ::FindWindow(NULL, strWindowName);
GetWindowRect(hWnd, WindowRect);
HWND hForeHwnd= ::GetForegroundWindow();
if(hWnd)
{
if(hWnd != hForeHwnd)
{
cout << "Foreground Window" << endl;
::SetForegroundWindow(hWnd);  
}
}
else
return FALSE;

return TRUE;



}*/


------------------------------------------------------------

// SU_auto2.h : PROJECT_NAME 응용 프로그램에 대한 주 헤더 파일입니다.
//

#pragma once

#ifndef __AFXWIN_H__
	#error "PCH에 대해 이 파일을 포함하기 전에 'stdafx.h'를 포함합니다."
#endif

#include "resource.h"		// 주 기호입니다.


// CSU_auto2App:
// 이 클래스의 구현에 대해서는 SU_auto2.cpp을 참조하십시오.
//

class CSU_auto2App : public CWinApp
{
public:
	CSU_auto2App();

// 재정의입니다.
public:
	virtual BOOL InitInstance();
	int ExecuteOutsideEditor();
// 구현입니다.

protected:
	PROCESS_INFORMATION pinfo;
	//BOOL WindowCheck(CString strWindowName, CRect& WindowRect);
	DECLARE_MESSAGE_MAP()
};

extern CSU_auto2App theApp;

----------------------------------------------------------

// SU_auto2Dlg.h : 헤더 파일
//

#pragma once
#include "afxwin.h"


// CSU_auto2Dlg 대화 상자
class CSU_auto2Dlg : public CDialogEx
{
// 생성입니다.
public:
	CSU_auto2Dlg(CWnd* pParent = NULL);	// 표준 생성자입니다.

// 대화 상자 데이터입니다.
	enum { IDD = IDD_SU_AUTO2_DIALOG };

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);	// DDX/DDV 지원입니다.


// 구현입니다.
protected:
	HICON m_hIcon;

	// 생성된 메시지 맵 함수
	virtual BOOL OnInitDialog();
	afx_msg void OnSysCommand(UINT nID, LPARAM lParam);
	afx_msg void OnPaint();
	afx_msg HCURSOR OnQueryDragIcon();
	DECLARE_MESSAGE_MAP()
public:
	CComboBox ModeCombo;
	CComboBox InputCombo;
	CComboBox SizeCombo;
	CComboBox ColorMode;
	CComboBox ResolutionCombo;
	CComboBox PrintSizeCombo;
	CComboBox DataTypeCombo;
	afx_msg void AddValueButton();
	CListBox ListBox;
	afx_msg void DeleteButton();
	afx_msg void OnBnClickedOk();
};


--------------------------------------------------


// SU_auto2Dlg.cpp : 구현 파일
//

#include "stdafx.h"
#include "SU_auto2.h"
#include "SU_auto2Dlg.h"
#include "afxdialogex.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 응용 프로그램 정보에 사용되는 CAboutDlg 대화 상자입니다.

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 대화 상자 데이터입니다.
	enum { IDD = IDD_ABOUTBOX };

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 지원입니다.

// 구현입니다.
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CSU_auto2Dlg 대화 상자




CSU_auto2Dlg::CSU_auto2Dlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(CSU_auto2Dlg::IDD, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CSU_auto2Dlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_COMBO1, ModeCombo);
	DDX_Control(pDX, IDC_COMBO2, InputCombo);
	DDX_Control(pDX, IDC_COMBO3, SizeCombo);
	DDX_Control(pDX, IDC_COMBO4, ColorMode);
	DDX_Control(pDX, IDC_COMBO5, ResolutionCombo);
	DDX_Control(pDX, IDC_COMBO7, DataTypeCombo);
	DDX_Control(pDX, IDC_LIST1, ListBox);
}

BEGIN_MESSAGE_MAP(CSU_auto2Dlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDCANCEL3, &CSU_auto2Dlg::AddValueButton)
	ON_BN_CLICKED(IDCANCEL4, &CSU_auto2Dlg::DeleteButton)
	ON_BN_CLICKED(IDOK, &CSU_auto2Dlg::OnBnClickedOk)
END_MESSAGE_MAP()


// CSU_auto2Dlg 메시지 처리기

BOOL CSU_auto2Dlg::OnInitDialog() //초기화
{
	CDialogEx::OnInitDialog();

	
	ModeCombo.AddString(_T("Document"));
	ModeCombo.AddString(_T("Photo"));
	ModeCombo.AddString(_T("Custom"));
	ModeCombo.AddString(_T("Stitch"));
	ModeCombo.AddString(_T("ScanGear"));
	ModeCombo.AddString(_T("OCR"));
	ModeCombo.AddString(_T("E-mail"));

	InputCombo.AddString(_T("자동 모드"));
	InputCombo.AddString(_T("평판 유리"));
	InputCombo.AddString(_T("공급 장치"));
	
	SizeCombo.AddString(_T("A3"));
	SizeCombo.AddString(_T("A4"));
	SizeCombo.AddString(_T("A4R"));
	SizeCombo.AddString(_T("A5"));
	SizeCombo.AddString(_T("A5R"));
	SizeCombo.AddString(_T("11x17"));
	SizeCombo.AddString(_T("Legal"));
	SizeCombo.AddString(_T("Letter"));
	SizeCombo.AddString(_T("LetterR"));
	SizeCombo.AddString(_T("Statement"));

	ColorMode.AddString(_T("컬러"));
	ColorMode.AddString(_T("회색조"));
	ColorMode.AddString(_T("흑백"));

	ResolutionCombo.AddString(_T("75dpi"));
	ResolutionCombo.AddString(_T("100dpi"));
	ResolutionCombo.AddString(_T("150dpi"));
	ResolutionCombo.AddString(_T("200dpi"));
	ResolutionCombo.AddString(_T("300dpi"));

	DataTypeCombo.AddString(_T("JPEG/Exif"));
	DataTypeCombo.AddString(_T("TIFF"));
	DataTypeCombo.AddString(_T("PNG"));
	DataTypeCombo.AddString(_T("PDF"));


	// 시스템 메뉴에 "정보..." 메뉴 항목을 추가합니다.

	// IDM_ABOUTBOX는 시스템 명령 범위에 있어야 합니다.
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 이 대화 상자의 아이콘을 설정합니다. 응용 프로그램의 주 창이 대화 상자가 아닐 경우에는
	//  프레임워크가 이 작업을 자동으로 수행합니다.
	SetIcon(m_hIcon, TRUE);			// 큰 아이콘을 설정합니다.
	SetIcon(m_hIcon, FALSE);		// 작은 아이콘을 설정합니다.

	// TODO: 여기에 추가 초기화 작업을 추가합니다.

	return TRUE;  // 포커스를 컨트롤에 설정하지 않으면 TRUE를 반환합니다.
}

void CSU_auto2Dlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 대화 상자에 최소화 단추를 추가할 경우 아이콘을 그리려면
//  아래 코드가 필요합니다. 문서/뷰 모델을 사용하는 MFC 응용 프로그램의 경우에는
//  프레임워크에서 이 작업을 자동으로 수행합니다.

void CSU_auto2Dlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 그리기를 위한 디바이스 컨텍스트입니다.

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 클라이언트 사각형에서 아이콘을 가운데에 맞춥니다.
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 아이콘을 그립니다.
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

// 사용자가 최소화된 창을 끄는 동안에 커서가 표시되도록 시스템에서
//  이 함수를 호출합니다.
HCURSOR CSU_auto2Dlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}





void CSU_auto2Dlg::AddValueButton() //추가 버튼 동작
{
	CString addValue[6];
	this->ModeCombo.GetLBText(this->ModeCombo.GetCurSel(), addValue[0]); 
	this->InputCombo.GetLBText(this->InputCombo.GetCurSel(), addValue[1]); 
	this->SizeCombo.GetLBText(this->SizeCombo.GetCurSel(), addValue[2]); 
	this->ColorMode.GetLBText(this->ColorMode.GetCurSel(), addValue[3]); 
	this->ResolutionCombo.GetLBText(this->ResolutionCombo.GetCurSel(), addValue[4]); 
	this->DataTypeCombo.GetLBText(this->DataTypeCombo.GetCurSel(), addValue[5]); 
	//콤보박스에서 선택된 값 배열에 입력
	
	

	int index=ListBox.InsertString(0,addValue[0]+", "+addValue[1]+", "+addValue[2]+", "+addValue[3]+", "+addValue[4]+", "+addValue[5]);
	ListBox.SetCurSel(index);
	//리스트박스에 값 입력

	//MessageBox(temp, _T("title")); //temp의 값을 alert창으로 띄움


}


void CSU_auto2Dlg::DeleteButton() //삭제 버튼 동작
{
	int index=ListBox.GetCurSel();
	ListBox.DeleteString(index);

}


void CSU_auto2Dlg::OnBnClickedOk() //확인 버튼 동작
{
	CDialogEx::OnOK();


}
----------------------

