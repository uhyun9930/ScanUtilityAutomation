GetDlgItem()을 이용하면 edit, button 등등의 컨트롤이 가지고 있는 ID를 이용해서 해당 컨트롤의 핸들을 가져와 사용할 수 있습니다.

함수원형은 다음과 같습니다.

HWND GetDlgItem(HWND hDlg, int nIDDlgItem);

hDlg는 컨트롤을 가지고 있는 다이얼로그의 핸들이고 nIDDlgItem은 컨트롤의 ID...
반환값이 해당 컨트롤의 핸들...

사용 예)

HWND h = ::GetDlgItem(m_hWnd, IDC_BUTTON1);



출처: http://frog3147.tistory.com/entry/ID를-이용해-해당-컨트롤의-핸들-가져오기 [for( ; ; )]


//----------------------------------------------
// 윈도우 핸들로 프로세스 아이디 얻기
//----------------------------------------------
ULONG ProcIDFromWnd(HWND hwnd) 
{  
 ULONG idProc;  
 GetWindowThreadProcessId( hwnd, &idProc );  
 return idProc;  
}

 

//----------------------------------------------
// 프로세스 아이디로 윈도우 핸들 얻기
//----------------------------------------------
HWND GetWinHandle(ULONG pid) 
{  
 HWND tempHwnd = FindWindow(NULL,NULL);   // 최상위 윈도우 핸들 찾기 

 while( tempHwnd != NULL )
 {  
  if( GetParent(tempHwnd) == NULL )             // 최상위 핸들인지 체크, 버튼 등도 핸들을 가질 수 있으므로 무시하기 위해  
   if( pid == ProcIDFromWnd(tempHwnd) )  
    return tempHwnd;  
  tempHwnd = GetWindow(tempHwnd, GW_HWNDNEXT); // 다음 윈도우 핸들 찾기  
 }  
 return NULL;  
}





출처: http://gaepein.tistory.com/entry/프로세스ID-윈도우-핸들-컨트롤 [La Vita E Bella[인생은 아름다워]]




1. 컨트롤의 ID로 컨트롤의 윈도우 핸들을 알아내는 함수

 

HWND GetDlgItem(      

    HWND hDlg,                              //컨트롤의 핸들을 알아낼 대화상자의 핸들
    int nIDDlgItem                          //컨트롤의 ID
);

 

retrun : 컨트롤의 윈도우 핸들값

 

 

Visual Tool을 이용하여 대화상자를 만들게 되면 기본적으로 컨트롤의 ID만 알게된다.

 

그럼 GetDlgItem함수를 이용하여 컨트롤의 핸들을 얻으면 마음대로 프로그래밍 할 수 있게된다.

 

보통 컨트롤 ID를 요구하는 함수와 윈도우 핸들을 요구하는 함수로 나뉘어 있기 때문에 이 함수는 매우 유용하다.

 

ex)

HWND hEdit = GetDlgItem(hDlg, IDC_EDIT1);

ShowWindow(hEdit, SW_HIDE);

 

 

2. 컨트롤의 윈도우 핸들로 컨트롤의 ID를 알아내는 함수

 

int GetDlgCtrlID(      

    HWND hwndCtl                                          //컨트롤의 윈도우 핸들
);

 

retrun : 컨트롤의 ID

 

 

위의 함수와 반대의 기능을 가진다. 사용빈도는 그리 높지 않다.

 

 

3. 컨트롤의 문자열을 얻는 함수

 

UINT GetDlgItemText(      

    HWND hDlg,                                            //대화상자의 윈도우 핸들
    int nIDDlgItem,                                       //컨트롤의 ID
    LPTSTR lpString,                                      //문자열 버퍼
    int nMaxCount                                         //문자열 버퍼의 크기
);

 

 

4. 컨트롤의 문자열을 설정하는 함수

 

BOOL SetDlgItemText(      

    HWND hDlg,                                            //대화상자의 윈도우 핸들
    int nIDDlgItem,                                       //컨트롤의 ID
    LPCTSTR lpString                                      //문자열 버퍼
);

 

 

5. 컨트롤의 정수 값을 얻는 함수

 

UINT GetDlgItemInt(     

    HWND hDlg,                                            //대화상자의 윈도우 핸들
    int nIDDlgItem,                                       //컨트롤의 ID
    BOOL *lpTranslated,                                   //에러의 유무
    BOOL bSigned                                          //TRUE일 때 부호있는 정수값, FALSE일 때 부호 무시하고 양수값
);

 

* 3번째 인수인 lpTranslated는 컨트롤의 정수 값을 읽을 때 에러가 난경우 에러를 표시해준다.

 

정수값을 얻는 함수는 에러가 발생할 소지가 높다. 예를 들어 에디트에 입력된 정수를 읽어들일 경우 에디트에 숫자 이외의

 

문자가 있거나 숫자가 너무 클 경우 등이다. 에러 검사를 할 필요가 없을 경우에는 세번째 인수를 NULL값을 주면 된다.

 

 

6. 컨트롤에 정수 값을 설정하는 함수

 

BOOL SetDlgItemInt(       

    HWND hDlg,                                             //대화상자의 윈도우 핸들
    int nIDDlgItem,                                        //컨트롤의 ID
    UINT uValue,                                           //설정할 정수값
    BOOL bSigned                                           //TRUE일 때 부호있는 정수값, FALSE일 때 부호 무시하고 양수값
);

 

 

ex)


int x,y;                                                   //문자열을 출력할 좌표
TCHAR str[256];                                            //출력할 문자열

LRESULT CALLBACK WndProc(HWND hwnd, UINT iMsg, WPARAM wParam, LPARAM lParam){
 HDC hdc;
 PAINTSTRUCT ps;
 switch(iMsg){
  case WM_CREATE:
   x = y = 100;                                            //전역변수 초기화
   wcscpy(str,L"안녕하세요");
   return 0;


  case WM_PAINT:
   hdc = BeginPaint(hwnd,&ps);
   TextOut(hdc,x,y,str,wcslen(str));                       //문자열 출력
   EndPaint(hwnd,&ps);
   return 0;


  case WM_LBUTTONDOWN:                                     //대화상자 Modal형으로 만든다
   if(DialogBox(g_hInstance, MAKEINTRESOURCE(IDD_DIALOG1), HWND_DESKTOP, AboutDlgProc) == IDOK){
    InvalidateRect(hwnd,NULL,TRUE);                        //리턴값이 IDOK면 무효화 시켜준다.
   }
   return 0;


  case WM_DESTROY:
   PostQuitMessage(0);
   return 0;
 }
 return DefWindowProc(hwnd,iMsg,wParam,lParam);
}

 

//대화상자 프로시저

BOOL CALLBACK AboutDlgProc(HWND hDlg, UINT iMsg, WPARAM wParam, LPARAM lParam){
 switch(iMsg){
  case WM_INITDIALOG:                                        //대화상자 초기화
   SetDlgItemInt(hDlg,IDC_X,x,TRUE);                         //x좌표를 써준다
   SetDlgItemInt(hDlg,IDC_Y,y,TRUE);                         //y좌표를 써준다
   SetDlgItemText(hDlg,IDC_STR,str);                         //문자열을 써준다
   return TRUE;



  case WM_COMMAND:
   switch(wParam){
    case IDOK:
     x = GetDlgItemInt(hDlg,IDC_X,NULL,TRUE);                 //확인버튼 누르면 전역변수에 값 저장
     y = GetDlgItemInt(hDlg,IDC_Y,NULL,TRUE);
     GetDlgItemText(hDlg,IDC_STR,str,256);
     EndDialog(hDlg,IDOK);                                    //모달형이므로 EndDialog함수를써서 종료 반환값은 IDOK
     return TRUE;
    case IDCANCEL:
     EndDialog(hDlg,IDCANCEL);
     return TRUE;
   }
   return TRUE;
 }
 return FALSE;
}
[출처] 컨트롤과의 통신을 위한 함수들 (GetDlgItem, GetDlgCtrlID, GetDlgItemText, GetDlgItemInt, SetDlgItemText, SetDlgItemInt)|작성자 김쵸리
